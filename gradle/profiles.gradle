def profileToUse;
def localProfiles='local'
def productionProfiles='production'

if (project.hasProperty('production')) {
	// Use the production properties, which uses a postgresql database
	profileToUse = productionProfiles
	apply from: rootProject.file('gradle/profile-production.gradle');
} else {
	// Use the local properties, which uses a MySQL database and developer tools
	profileToUse = localProfiles
	apply from: rootProject.file('gradle/profile-local.gradle');
}

// Appends properties to the application.properties file during compilation,
// which ensures WARs and JARs always run with the profiles they were built with.
// Also works with the bootRun task without requiring it to be extended.
// Defaults to the "local" profile if no -P arguments are provided.
classes {
	doLast {
		FileTree tree = fileTree(dir: "build/resources/main").include("application.properties")
		tree.each { File file -> file.append('\nspring.profiles.active=' + profileToUse); }
	}
}

println 'Using profile: "' + profileToUse + '" for ' + project.getName()